// Generated by CoffeeScript 1.6.2
(function() {
  var Compilation, compile, isArray, parseJSON, saveAs, tasks;

  parseJSON = JSON.parse || $.parseJSON;

  isArray = function(obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
  };

  saveAs = function(name, text) {
    var a, blob, event;

    if (!document.createElementNS) {
      return false;
    }
    a = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
    if (!("download" in a)) {
      return false;
    }
    blob = new window.Blob([text], {
      type: "text/plain;charset=utf8"
    });
    a.href = window.URL.createObjectURL(blob);
    a.download = name;
    event = document.createEvent("MouseEvents");
    event.initMouseEvent("click", 1, 0, window, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, null);
    a.dispatchEvent(event);
    return true;
  };

  Compilation = (function() {
    function Compilation() {
      this.values = {};
      this.events = {};
      this.dones = [];
      this.pending = 0;
    }

    Compilation.prototype._begin = function() {
      return this.pending++;
    };

    Compilation.prototype._end = function() {
      this.pending--;
      return this._check();
    };

    Compilation.prototype._check = function() {
      if (this.pending === 0) {
        return this._finish();
      }
    };

    Compilation.prototype._finish = function() {
      var done, _i, _len, _ref, _results;

      console.log("finish!");
      _ref = this.dones;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        done = _ref[_i];
        _results.push(done.call(this));
      }
      return _results;
    };

    Compilation.prototype._on = function(event, callback) {
      if (!this.events[event]) {
        this.events[event] = [];
      }
      return this.events[event].push(callback);
    };

    Compilation.prototype._emit = function(event, val) {
      var callback, callbacks, _i, _len, _results;

      callbacks = this.events[event];
      if (!callbacks) {
        return;
      }
      _results = [];
      for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
        callback = callbacks[_i];
        _results.push(callback.call(this, val));
      }
      return _results;
    };

    Compilation.prototype._warn = function(str) {
      return console.warn('compile.js', str);
    };

    Compilation.prototype._err = function(str) {
      console.error('compile.js', str);
      return this._emit('error', str);
    };

    Compilation.prototype._ajax = function(url, callback) {
      var m,
        _this = this;

      m = url.match(/https?:\/\/[^\/]+/);
      if (!m || m[0] === window.location.origin) {
        return $.ajax({
          url: url
        }).always(function(body, status, msg) {
          if (status === 'error') {
            return _this._err("ajax: " + msg);
          }
          return callback(body);
        });
      } else {
        return $.ajax({
          url: 'http://compilejs.jpillora.com/retrieve',
          data: {
            url: url
          },
          dataType: 'jsonp'
        }).always(function(obj, status, msg) {
          if (status === 'error') {
            return _this._err("ajax: " + msg);
          }
          if (obj.error) {
            return _this._err("ajax: " + obj.error);
          }
          return callback(obj.body);
        });
      }
    };

    Compilation.prototype._getAll = function(names, callback) {
      var i, name, values, _i, _len, _results,
        _this = this;

      values = [];
      _results = [];
      for (i = _i = 0, _len = names.length; _i < _len; i = ++_i) {
        name = names[i];
        _results.push((function(i) {
          return _this.get(name, function(val) {
            values[i] = val;
            if (names.length === values.length) {
              return callback(values);
            }
          });
        })(i));
      }
      return _results;
    };

    Compilation.prototype.get = function(name, callback) {
      var doCallback;

      this._begin();
      if (isArray(name)) {
        this._getAll(name, callback);
        return this;
      }
      if (typeof name !== 'string') {
        this._err;
      }
      doCallback = function() {
        this._emit("get:" + name);
        callback(this.values[name]);
        return this._end();
      };
      if (this.values[name]) {
        setTimeout(doCallback, 0);
      } else {
        this._on("set:" + name, doCallback);
      }
      return this;
    };

    Compilation.prototype.set = function(name, str) {
      var doCallback,
        _this = this;

      this._begin();
      if (this.values[name]) {
        return this._err("set: '" + name + "' already exists");
      }
      doCallback = function(val) {
        _this.values[name] = val;
        _this._emit("set:" + name);
        return _this._end();
      };
      if (/[\s\{\}]/.test(str)) {
        setTimeout((function() {
          return doCallback(str);
        }), 0);
      } else {
        this._ajax(str, doCallback);
      }
      return this;
    };

    Compilation.prototype.download = function(name) {
      var _this = this;

      this.get(name, function(val) {
        if (saveAs("" + name + ".js", val)) {
          return;
        }
        return $("<form method='post'></form>").attr('action', "http://compilejs.jpillora.com/download?filename=" + (encodeURIComponent(name)) + ".js").append($("<textarea name='__compilejsDownload'></textarea>").html(val)).submit();
      });
      this._check();
      return this;
    };

    Compilation.prototype.run = function(name, config) {
      var gotSrc, task,
        _this = this;

      this._begin();
      task = tasks[name];
      if (!task) {
        return this._err("run: Missing task '" + name + "'");
      }
      gotSrc = function(src) {
        config.src = src;
        return task.run.call(_this, config, function(err) {
          if (err) {
            _this._err("run: " + name + ": " + err);
          }
          return _this._end();
        });
      };
      if (config.src) {
        this.get(config.src, gotSrc);
      } else {
        setTimeout(gotSrc, 0);
      }
      return this;
    };

    Compilation.prototype.error = function(callback) {
      this._on('error', callback);
      return this;
    };

    return Compilation;

  })();

  tasks = {};

  compile = {
    init: function() {
      return new Compilation;
    },
    task: function(name, def) {
      if (tasks[name]) {
        this._warn("task: '" + name + "' already exists ");
      }
      if (typeof def === "function") {
        def = {
          run: def
        };
      } else if (!def || typeof def.run !== "function") {
        return this._err("task: '" + name + "' Missing function");
      }
      return tasks[name] = def;
    }
  };

  if (typeof exports === "object") {
    module.exports = compile;
  } else if (typeof define === "function" && define.amd) {
    define(function() {
      return compile;
    });
  } else {
    window.compile = compile;
  }

}).call(this);
