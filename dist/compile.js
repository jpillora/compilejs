// Generated by CoffeeScript 1.10.0
(function() {
  var Compilation, EventEmitter, ajax, base, compile, cons, encode, guid, iframeName, isArray, parseJSON, saveAs, tasks;

  parseJSON = (typeof JSON !== "undefined" && JSON !== null ? JSON.parse : void 0) || $.parseJSON;

  isArray = function(obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
  };

  guid = function() {
    return (Math.random() * Math.pow(2, 32)).toString(16);
  };

  saveAs = function(name, text) {
    var a, blob, event;
    if (!document.createElementNS) {
      return false;
    }
    a = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
    if (!("download" in a)) {
      return false;
    }
    blob = new window.Blob([text], {
      type: "text/plain;charset=utf8"
    });
    a.href = window.URL.createObjectURL(blob);
    a.download = name;
    event = document.createEvent("MouseEvents");
    event.initMouseEvent("click", 1, 0, window, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, null);
    a.dispatchEvent(event);
    return true;
  };

  encode = function(str) {
    encode.elem = encode.elem || $("<div/>");
    return encode.elem.text(str).html();
  };

  if (!Array.prototype.indexOf) {
    (base = Array.prototype).indexOf || (base.indexOf = function(item) {
      var i, j, len, x;
      for (i = j = 0, len = this.length; j < len; i = ++j) {
        x = this[i];
        if (x === item) {
          return i;
        }
      }
      return -1;
    });
  }

  iframeName = 'compilejs-' + guid() + guid();

  $(function() {
    return $("<iframe name='" + iframeName + "'></iframe>").hide().appendTo("body");
  });

  EventEmitter = (function() {
    function EventEmitter(parent) {
      this.parent = parent != null ? parent : window;
      this.events = {};
    }

    EventEmitter.prototype.on = function(event, callback) {
      if (!this.events[event]) {
        this.events[event] = [];
      }
      this.events[event].push(callback);
      return this.parent;
    };

    EventEmitter.prototype.once = function(event, callback) {
      var proxy;
      proxy = (function(_this) {
        return function() {
          var i;
          i = _this.events[event].indexOf(proxy);
          _this.events[event].splice(1, i);
          return callback.apply(_this.parent, arguments);
        };
      })(this);
      return this.on(event, proxy);
    };

    EventEmitter.prototype.emit = function() {
      var args, callback, callbacks, event, j, len;
      args = Array.prototype.slice.call(arguments);
      event = args.shift();
      callbacks = this.events[event];
      if (!callbacks) {
        return;
      }
      for (j = 0, len = callbacks.length; j < len; j++) {
        callback = callbacks[j];
        callback.apply(this.parent, args);
      }
      return this.parent;
    };

    return EventEmitter;

  })();

  ajax = function(url, callback) {
    var m;
    m = url.match(/https?:\/\/[^\/]+/);
    if (!m || m[0] === window.location.origin) {
      return $.ajax({
        url: url,
        dataType: 'text'
      }).always((function(_this) {
        return function(body, status, msg) {
          if (status === 'error') {
            return callback("ajax: " + msg);
          }
          return callback(null, body);
        };
      })(this));
    } else {
      return $.ajax({
        url: 'http://compilejs.jpillora.com/retrieve',
        data: {
          url: url
        },
        dataType: 'jsonp'
      }).always((function(_this) {
        return function(obj, status, msg) {
          if (status === 'error') {
            return callback("ajax: " + msg);
          }
          if (obj.error) {
            return callback("ajax: " + obj.error);
          }
          return callback(null, obj.body);
        };
      })(this));
    }
  };

  Compilation = (function() {
    function Compilation() {
      this.values = {};
      this._ee = new EventEmitter(this);
    }

    Compilation.prototype._getAll = function(names, callback) {
      var got, values;
      got = 0;
      values = [];
      $.each(names, (function(_this) {
        return function(i, name) {
          return _this.get(name, function(val) {
            values[i] = val;
            if (++got === names.length) {
              return callback(values);
            }
          });
        };
      })(this));
      return this;
    };

    Compilation.prototype.get = function(name, callback) {
      var doCallback, timeout;
      if (isArray(name)) {
        return this._getAll(name, callback);
      }
      if (typeof name !== 'string') {
        return this._error("get: name should be a string");
      }
      timeout = setTimeout((function(_this) {
        return function() {
          return _this._warn("get: timeout waiting for '" + name + "'");
        };
      })(this), 15 * 1000);
      doCallback = (function(_this) {
        return function() {
          _this._ee.emit("get:value:" + name);
          clearTimeout(timeout);
          return callback(_this.values[name]);
        };
      })(this);
      this._log("get " + name);
      if (this.values[name]) {
        doCallback();
      } else {
        this._ee.once("set:value:" + name, doCallback);
      }
      return this;
    };

    Compilation.prototype.set = function(name, str) {
      this._log("set " + name);
      if (this.values[name]) {
        return this._error("set: '" + name + "' already exists");
      }
      setTimeout((function(_this) {
        return function() {
          _this.values[name] = str;
          return _this._ee.emit("set:value:" + name);
        };
      })(this), 0);
      return this;
    };

    Compilation.prototype.fetch = function(name, url) {
      this._log("fetch " + name);
      if (this.values[name]) {
        return this._error("set: '" + name + "' already exists");
      }
      ajax(url, (function(_this) {
        return function(err, result) {
          if (err) {
            return _this._error(err);
          }
          _this.values[name] = result;
          return _this._ee.emit("set:value:" + name);
        };
      })(this));
      return this;
    };

    Compilation.prototype.download = function(name, filename) {
      if (filename == null) {
        filename = name + ".js";
      }
      this._log("downloading " + name);
      this.get(name, (function(_this) {
        return function(val) {
          var form;
          if (saveAs(filename, val)) {
            _this._log("native download");
            return;
          }
          form = $("<form method='post' target='" + iframeName + "'></form>").hide().attr('action', "http://compilejs.jpillora.com/download?filename=" + (encodeURIComponent(filename))).append($("<textarea name='__compilejsDownload'></textarea>").text(val)).appendTo("body").submit();
          return _this._log("replay download");
        };
      })(this));
      return this;
    };

    Compilation.prototype.popup = function(name) {
      this.get(name, (function(_this) {
        return function(val) {
          var w;
          w = window.open(null, 'id', 'width=400,height=100,toolbar=0,menubar=0,location=0,status=0,scrollbars=1,resizable=0,left=0,top=0');
          return w.document.writeln("<pre>" + encode(val) + "</pre>");
        };
      })(this));
      return this;
    };

    Compilation.prototype.run = function(name, config) {
      var checkScripts, gotScripts, gotSrc, load, ref, script, task, wait;
      task = tasks[name];
      if (!task) {
        return this._error("run: Missing task '" + name + "'");
      }
      gotSrc = (function(_this) {
        return function(src) {
          config.src = src;
          if (task.init && !task._initd) {
            task.init();
            task._initd = true;
          }
          return task.run.call(_this, config, function(err) {
            if (err) {
              return _this._error("run: " + name + ": " + err);
            }
          });
        };
      })(this);
      gotScripts = (function(_this) {
        return function() {
          if (config.src) {
            _this._log("task: " + name + ": src:", config.src);
            return _this.get(config.src, gotSrc);
          } else {
            return gotSrc();
          }
        };
      })(this);
      checkScripts = (function(_this) {
        return function() {
          if (wait === load) {
            return gotScripts();
          }
        };
      })(this);
      wait = 0;
      load = 0;
      if ($.isPlainObject(task.fetch)) {
        ref = task.fetch;
        for (name in ref) {
          script = ref[name];
          if (window[name]) {
            continue;
          }
          wait++;
          $.ajax({
            url: script,
            dataType: 'script',
            cache: true,
            success: (function(_this) {
              return function() {
                load++;
                return checkScripts();
              };
            })(this)
          });
        }
      }
      checkScripts();
      return this;
    };

    Compilation.prototype.options = function() {
      throw "Not implemented";
    };

    return Compilation;

  })();

  cons = {};

  $.each(['log', 'error', 'warn'], function(i, fn) {
    cons[fn] = function() {
      if (/MSIE/.test(window.navigator.userAgent)) {
        return;
      }
      return console[fn].apply(console, ['Compile.js:'].concat(Array.prototype.slice.call(arguments)));
    };
    Compilation.prototype[fn] = function(callback) {
      this._ee.on(fn, callback);
      return this;
    };
    return Compilation.prototype['_' + fn] = function() {
      var args;
      args = Array.prototype.slice.call(arguments);
      cons[fn].apply(this, args);
      this._ee.emit([fn].concat(args));
      return this;
    };
  });

  tasks = {};

  compile = {
    EE: EventEmitter,
    ajax: ajax,
    tasks: tasks,
    task: function(name, def) {
      if (tasks[name]) {
        cons.warn("task: '" + name + "' already exists");
      }
      if (typeof def === "function") {
        def = {
          run: def
        };
      } else if (!def || typeof def.run !== "function") {
        return cons.error("task: '" + name + "' Missing run function");
      }
      return tasks[name] = def;
    }
  };

  $.each(['log', 'error', 'warn', 'get', 'set', 'download', 'fetch', 'run', 'popup'], function(i, fn) {
    return compile[fn] = function() {
      var inst;
      inst = new Compilation;
      return inst[fn].apply(inst, arguments);
    };
  });

  compile.task('concat', function(config, callback) {
    var val;
    val = typeof config.src === 'string' ? config.src : $.isArray(config.src) ? config.src.join(config.sep || '\n') : void 0;
    return this.set(config.dest, val, true);
  });

  compile.task('uglify', {
    fetch: {
      UglifyJS: "//rawgit.com/jpillora/compilejs/gh-pages/vendor/uglify.min.js"
    },
    run: function(config, callback) {
      var e, error, out;
      try {
        out = UglifyJS.minify(config.src, config.options);
      } catch (error) {
        e = error;
        callback("uglify: parse error: '" + e.message + "' on line: " + e.line + " col: " + e.col);
        return;
      }
      this.set(config.dest, out, true);
      return callback();
    }
  });

  $.compile = compile;

}).call(this);
