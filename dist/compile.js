// Generated by CoffeeScript 1.6.2
(function() {
  var Compilation, compile, cons, isArray, parseJSON, saveAs, tasks;

  parseJSON = (typeof JSON !== "undefined" && JSON !== null ? JSON.parse : void 0) || $.parseJSON;

  isArray = function(obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
  };

  saveAs = function(name, text) {
    var a, blob, event;

    if (!document.createElementNS) {
      return false;
    }
    a = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
    if (!("download" in a)) {
      return false;
    }
    blob = new window.Blob([text], {
      type: "text/plain;charset=utf8"
    });
    a.href = window.URL.createObjectURL(blob);
    a.download = name;
    event = document.createEvent("MouseEvents");
    event.initMouseEvent("click", 1, 0, window, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, null);
    a.dispatchEvent(event);
    return true;
  };

  Compilation = (function() {
    function Compilation() {
      this.values = {};
      this.events = {};
    }

    Compilation.prototype._on = function(event, callback) {
      if (!this.events[event]) {
        this.events[event] = [];
      }
      this.events[event].push(callback);
      return this;
    };

    Compilation.prototype._emit = function(event, val) {
      var callback, callbacks, _i, _len;

      callbacks = this.events[event];
      if (!callbacks) {
        return;
      }
      for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
        callback = callbacks[_i];
        callback.call(this, val);
      }
      return this;
    };

    Compilation.prototype._ajax = function(url, callback) {
      var m,
        _this = this;

      m = url.match(/https?:\/\/[^\/]+/);
      if (!m || m[0] === window.location.origin) {
        return $.ajax({
          url: url,
          dataType: 'text'
        }).always(function(body, status, msg) {
          if (status === 'error') {
            return _this._error("ajax: " + msg);
          }
          return callback(body);
        });
      } else {
        return $.ajax({
          url: 'http://compilejs.jpillora.com/retrieve',
          data: {
            url: url
          },
          dataType: 'jsonp'
        }).always(function(obj, status, msg) {
          if (status === 'error') {
            return _this._error("ajax: " + msg);
          }
          if (obj.error) {
            return _this._error("ajax: " + obj.error);
          }
          return callback(obj.body);
        });
      }
    };

    Compilation.prototype._getAll = function(names, callback) {
      var i, name, values, _fn, _i, _len,
        _this = this;

      values = [];
      _fn = function(i) {
        return _this.get(name, function(val) {
          values[i] = val;
          if (names.length === values.length) {
            return callback(values);
          }
        });
      };
      for (i = _i = 0, _len = names.length; _i < _len; i = ++_i) {
        name = names[i];
        _fn(i);
      }
      return this;
    };

    Compilation.prototype.get = function(name, callback) {
      var doCallback, timeout,
        _this = this;

      if (isArray(name)) {
        return this._getAll(name, callback);
      }
      if (typeof name !== 'string') {
        return this._error("get: name should be a string");
      }
      timeout = setTimeout(function() {
        return _this._warn("get: timeout waiting for '" + name + "'");
      }, 3 * 1000);
      doCallback = function() {
        _this._emit("get:value:" + name);
        clearTimeout(timeout);
        return callback(_this.values[name]);
      };
      if (this.values[name]) {
        setTimeout(doCallback, 0);
      } else {
        this._on("set:value:" + name, doCallback);
      }
      return this;
    };

    Compilation.prototype.set = function(name, str) {
      var doCallback,
        _this = this;

      if (this.values[name]) {
        return this._error("set: '" + name + "' already exists");
      }
      doCallback = function(val) {
        _this.values[name] = val;
        return _this._emit("set:value:" + name);
      };
      if (/[\s\{\}]/.test(str)) {
        setTimeout((function() {
          return doCallback(str);
        }), 0);
      } else {
        this._ajax(str, doCallback);
      }
      return this;
    };

    Compilation.prototype.download = function(name) {
      var _this = this;

      this.get(name, function(val) {
        if (saveAs("" + name + ".js", val)) {
          return;
        }
        return $("<form method='post'></form>").attr('action', "http://compilejs.jpillora.com/download?filename=" + (encodeURIComponent(name)) + ".js").append($("<textarea name='__compilejsDownload'></textarea>").html(val)).submit();
      });
      return this;
    };

    Compilation.prototype.run = function(name, config) {
      var checkScripts, gotScripts, gotSrc, load, script, task, wait, _ref,
        _this = this;

      task = tasks[name];
      if (!task) {
        return this._error("run: Missing task '" + name + "'");
      }
      gotSrc = function(src) {
        config.src = src;
        if (task.init && !task._initd) {
          task.init();
          task._initd = true;
        }
        return task.run.call(_this, config, function(err) {
          if (err) {
            return _this._error("run: " + name + ": " + err);
          }
        });
      };
      gotScripts = function() {
        if (config.src) {
          return _this.get(config.src, gotSrc);
        } else {
          return setTimeout(gotSrc, 0);
        }
      };
      checkScripts = function() {
        if (wait === load) {
          return gotScripts();
        }
      };
      wait = 0;
      load = 0;
      if ($.isPlainObject(task.fetch)) {
        _ref = task.fetch;
        for (name in _ref) {
          script = _ref[name];
          if (window[name]) {
            continue;
          }
          wait++;
          $.getScript(script, function() {
            load++;
            return checkScripts();
          });
        }
      }
      checkScripts();
      return this;
    };

    return Compilation;

  })();

  cons = {};

  $.each(['log', 'error', 'warn'], function(i, fn) {
    cons[fn] = function() {
      return console[fn].apply(console, ['Compile.js:'].concat(Array.prototype.slice.call(arguments)));
    };
    Compilation.prototype[fn] = function(callback) {
      this._on(fn, callback);
      return this;
    };
    return Compilation.prototype['_' + fn] = function(str) {
      cons[fn](str);
      this._emit(fn, str);
      return this;
    };
  });

  tasks = {};

  compile = {
    init: function() {
      return new Compilation;
    },
    tasks: tasks,
    task: function(name, def) {
      if (tasks[name]) {
        cons.warn("task: '" + name + "' already exists");
      }
      if (typeof def === "function") {
        def = {
          run: def
        };
      } else if (!def || typeof def.run !== "function") {
        return cons.error("task: '" + name + "' Missing run function");
      }
      return tasks[name] = def;
    }
  };

  compile.task('concat', function(config, callback) {
    return this.set(config.dest, typeof config.src === 'string' ? config.src : void 0, $.isArray(config.src(config.src.join(config.sep || '\n'))) ? void 0 : void 0, null);
  });

  if (typeof exports === "object") {
    module.exports = compile;
  } else if (typeof define === "function" && define.amd) {
    define(function() {
      return compile;
    });
  } else {
    window.compile = compile;
  }

}).call(this);
