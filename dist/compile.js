// Generated by CoffeeScript 1.6.2
(function() {
  var Compilation, compile, isArray, parseJSON, tasks;

  parseJSON = JSON.parse || $.parseJSON;

  isArray = function(obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
  };

  Compilation = (function() {
    function Compilation() {
      this.values = {};
      this.events = {};
      this.dones = [];
      this.pending = 0;
    }

    Compilation.prototype._ajax = function(url, callback) {
      var m, origin;

      m = url.match(/https?:\/\/[^\/]+/);
      if (!m) {
        return this._err("ajax: Invalid URL: " + url);
      }
      origin = m[0];
      if (origin === window.location.origin) {
        return $.ajax({
          url: url
        }).always(function(body, status, msg) {
          return callback(status === 'error' && msg, body);
        });
      } else {
        return $.ajax({
          url: 'http://compilejs.jpillora.com/retrieve',
          data: {
            url: url
          },
          dataType: 'jsonp'
        }).always(function(body, status, msg) {
          var obj;

          obj = parseJSON(body);
          return callback(obj.body, obj.error);
        });
      }
    };

    Compilation.prototype._begin = function() {
      return this.pending++;
    };

    Compilation.prototype._end = function() {
      this.pending--;
      if (this.pending === 0) {
        return _finish();
      }
    };

    Compilation.prototype._finish = function() {
      var done, _i, _len, _ref, _results;

      _ref = this.dones;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        done = _ref[_i];
        _results.push(done.call(this));
      }
      return _results;
    };

    Compilation.prototype._on = function(event, callback) {
      if (!this.events[event]) {
        this.events[event] = [];
      }
      return this.events[event].push(callback);
    };

    Compilation.prototype._emit = function(event, val) {
      var callback, callbacks, _i, _len, _results;

      callbacks = this.events[event];
      if (!callbacks) {
        return;
      }
      _results = [];
      for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
        callback = callbacks[_i];
        _results.push(callback.call(this, val));
      }
      return _results;
    };

    Compilation.prototype._warn = function(str) {
      return console.warn(str);
    };

    Compilation.prototype._err = function() {
      return console.error(str);
    };

    Compilation.prototype._getAll = function(names, callback) {
      var i, name, values, _i, _len, _results,
        _this = this;

      values = [];
      _results = [];
      for (i = _i = 0, _len = names.length; _i < _len; i = ++_i) {
        name = names[i];
        _results.push((function(i) {
          return _this.get(name, function(val) {
            values[i] = val;
            if (names.length === values.length) {
              return callback(values);
            }
          });
        })(i));
      }
      return _results;
    };

    Compilation.prototype.get = function(name, callback) {
      var gotValue;

      if (isArray(name)) {
        this._getAll(name, callback);
        return;
      }
      gotValue = function() {
        this._emit("get:" + name);
        return callback(this.values[name]);
      };
      if (this.values[name]) {
        return setTimeout(gotValue, 0);
      } else {
        return this._on("set:" + name, gotValue);
      }
    };

    Compilation.prototype.set = function(name, str) {
      var gotValue,
        _this = this;

      if (this.values[name]) {
        return this._err("set: '" + name + "' already exists");
      }
      gotValue = function(val) {
        _this.values[name] = val;
        return _this._emit("set:" + name);
      };
      if (/\s/.test(str)) {
        setTimeout((function() {
          return gotValue(str);
        }), 0);
      } else {
        this._ajax(str, gotValue);
      }
      return this;
    };

    Compilation.prototype.download = function() {
      return this;
    };

    Compilation.prototype.run = function(name, config) {
      return this;
    };

    Compilation.prototype.done = function() {
      var done, gets;

      if (arguments.length === 0) {
        return this._err("done: Missing callback");
      }
      gets = Array.prototype.slice.call(arguments);
      done = names.pop();
      dones.push({
        done: done,
        gets: gets
      });
      return this;
    };

    return Compilation;

  })();

  tasks = {};

  compile = {
    init: function() {
      return new Compilation;
    },
    task: function(name, def) {
      if (tasks[name]) {
        this._warn("task: '" + name + "' already exists ");
      }
      if (typeof def === "function") {
        def = {
          run: def
        };
      } else if (!def || typeof def.run !== "function") {
        return this._err("task: '" + name + "' Missing function");
      }
      return tasks[name] = def;
    }
  };

}).call(this);
